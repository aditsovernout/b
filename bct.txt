//Acc to college sylaabus this is LA 4
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract StudentData {
    struct Student {
        string name;
        uint age;
        string course;
        uint studentId;
    }

    Student[] public students;
    
    mapping(uint => uint) public studentIdToIndex;

    fallback() external payable
    // in Solidity means that a function can be called from outside the contract (not internally) 
    // and can receive Ether along with the call.
    {
        revert("Fallback function called, no direct ether transfers allowed.");
    }

    function addStudent(string memory _name, uint _age, string memory _course, uint _studentId) public {
        require(studentIdToIndex[_studentId] == 0, "Student ID already exists!");
        students.push(Student(_name,_age,_course,_studentId));
        studentIdToIndex[_studentId] = students.length;
    }

    function getStudentById(uint _studentId) public view returns (string memory, uint, string memory, uint) {
        uint index = studentIdToIndex[_studentId];
        require(index > 0, "Student ID does not exist!");
        Student memory s = students[index - 1];
        return (s.name, s.age, s.course, s.studentId);
    }

    function getTotalStudents() public view returns (uint) {
        return students.length;
    }

    receive() external payable {
        revert("Direct ether transfer not allowed.");
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EmployeeData {
    // Structure to hold employee information
    struct Employee {
        string name;
        uint age;
        string position;
        uint employeeId;
    }
    Employee[] public employees;
    mapping(uint => uint) private employeeIdToIndex;

    // Fallback function to prevent direct Ether transfers
    fallback() external {
        revert("Direct Ether transfers are not allowed!");
    }

    // Function to add a new employee
    function addEmployee(string memory _name, uint _age, string memory _position, uint _employeeId) 
    public {
        require(employeeIdToIndex[_employeeId] == 0, "Employee ID already exists!");
        employees.push(Employee(_name, _age, _position, _employeeId));
        employeeIdToIndex[_employeeId] = employees.length; 
    }
    
    function getEmployeeById(uint _employeeId) public view returns (string memory, uint, string memory) {
        uint index = employeeIdToIndex[_employeeId];
        require(index > 0, "Employee ID does not exist!");
        Employee memory e = employees[index - 1]; // Adjust for zero indexing
        return (e.name, e.age, e.position);
    }

    // Function to get the total number of employees
    function getTotalEmployees() public view returns (uint) {
        return employees.length;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    // Mapping to store the balances of each customer's account
    mapping(address => uint) private balances;

    // Event to log deposits
    event Deposited(address indexed customer, uint amount);
    
    // Event to log withdrawals
    event Withdrawn(address indexed customer, uint amount);
    
    // Function to deposit money into the account
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        
        // Increase the customer's balance
        balances[msg.sender] += msg.value;

        // Emit a deposit event
        emit Deposited(msg.sender, msg.value);
    }

    // Function to withdraw money from the account
    function withdraw(uint amount) public {
        require(amount > 0, "Withdrawal amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Reduces the callerâ€™s balance by the withdrawal amount
        balances[msg.sender] -= amount;

        // Transfer the specified amount to the customer
        payable(msg.sender).transfer(amount);

        // Emit a withdrawal event
        emit Withdrawn(msg.sender, amount);
    }

    // Function to show the balance of the account
    function showBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ProductInventory {
    
    struct Product {
        string name;
        uint quantity;
    }

    mapping(uint => Product) public products;
    uint public productCount;

    // Function to receive products
    function receiveProduct(string memory _name, uint _quantity) public {
        productCount++;
        products[productCount] = Product(_name, _quantity);
    }

    // Function to sell products
    function sellProduct(uint _id, uint _quantity) public {
        require(_id > 0 && _id <= productCount, "Invalid Product ID");
        require(products[_id].quantity >= _quantity, "Not enough stock");
        products[_id].quantity -= _quantity;
    }

    // Function to display stock
    function displayStock(uint _id) public view returns (string memory, uint) {
        require(_id > 0 && _id <= productCount, "Invalid Product ID");
        return (products[_id].name, products[_id].quantity);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EmployeeData {
    
    // Structure to hold employee data
    struct Employee {
        uint id;
        string name;
        uint age;
        string position;
        uint salary;
    }

        // Fallback function
    fallback() external payable {
        revert("This contract does not accept direct payments");
    }

    // Array to hold list of employees
    Employee[] public employees;
    uint public employeeCount = 0;

    // Function to add a new employee
    function addEmployee(string memory _name, uint _age, string memory _position, uint _salary) public {
        employeeCount++;
        employees.push(Employee(employeeCount, _name, _age, _position, _salary));
    }

    // Function to retrieve an employee by ID
    function getEmployee(uint _id) public view returns (uint, string memory, uint, string memory, uint) {
        require(_id > 0 && _id <= employeeCount, "Invalid Employee ID");
        Employee memory emp = employees[_id - 1];  // Array is 0-indexed
        return (emp.id, emp.name, emp.age, emp.position, emp.salary);
    }

    // Receive function (optional, if you want to receive Ether)
    receive() external payable {
        // If you want to accept Ether, you can implement this
    }
}
